{"version":3,"sources":["Components/Bingo.js","Components/Edit.js","App.js","serviceWorker.js","index.js"],"names":["Bingo","title","words","useState","wordList","setWordList","toggleList","setToggleList","size","Math","ceil","sqrt","length","useEffect","wl","shuffle","split","Array","keys","map","e","handleToggle","useCallback","index","newToggleList","t","ti","Number","check","x","y","checkBingo","start","step","bingo","i","setBingo","isBingo","BingoContainer","w","Cell","floor","key","onClick","toggle","Toolbar","ToolButton","href","array","j","random","temp","styled","div","a","p","label","input","Edit","Container","action","Label","htmlFor","TextInput","id","name","type","defaultValue","TextArea","Button","form","Input","css","textarea","button","App","useSearchParam","edit","useLocation","hash","console","log","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b6939623.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\r\nimport styled from 'styled-components';\r\n\r\nexport default function Bingo({ title, words }) {\r\n\r\n    const [wordList, setWordList] = useState([]);\r\n    const [toggleList, setToggleList] = useState([]);\r\n    const size = Math.ceil(Math.sqrt(wordList.length))\r\n    const count = wordList.length;\r\n\r\n    useEffect(() => {\r\n        const wl = shuffle(words.split(\"\\n\"));\r\n        setWordList(wl);\r\n        setToggleList([...Array(wl.length).keys()].map(e => 0));\r\n    }, [words]);\r\n\r\n    const handleToggle = useCallback((index) => {\r\n        let newToggleList = toggleList.map((t, ti) => Number(ti == index ? (toggleList[index] > 0 ? 0 : 1) : t > 0 ? 1 : 0));\r\n\r\n        const check = (x, y) => {\r\n            const index = y * size + x;\r\n            return index >= newToggleList.length ? false : newToggleList[index] > 0;\r\n        }\r\n\r\n        const checkBingo = (start, step) => {\r\n            let bingo = true;\r\n            for (let i = 0; i < size; i++) {\r\n                if (!check(start[0] + step[0] * i, start[1] + step[1] * i)) bingo = false;\r\n            }\r\n            return bingo;\r\n        }\r\n\r\n        const setBingo = (start, step) => {\r\n            let bingo = true;\r\n            for (let i = 0; i < size; i++) {\r\n                const x = start[0] + step[0] * i;\r\n                const y = start[1] + step[1] * i;\r\n                const index = y * size + x;\r\n                if (index <= newToggleList.length) {\r\n                    newToggleList[index] = 2;\r\n                }\r\n            }\r\n        }\r\n\r\n        let isBingo = false;\r\n\r\n        for (let i = 0; i < size; i++) {\r\n            if (checkBingo([i, 0], [0, 1])) {\r\n                setBingo([i, 0], [0, 1]);\r\n                isBingo = true;\r\n                break;\r\n            }\r\n            if (checkBingo([0, i], [1, 0])) {\r\n                setBingo([0, i], [1, 0]);\r\n                isBingo = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // Check diagonals\r\n        if (!isBingo) {\r\n            if (checkBingo([0, 0], [1, 1])) {\r\n                setBingo([0, 0], [1, 1]);\r\n                isBingo = true;\r\n            }\r\n            else if (checkBingo([0, size - 1], [1, -1])) {\r\n                setBingo([0, size - 1], [1, -1]);\r\n                isBingo = true;\r\n            }\r\n        }\r\n\r\n\r\n        setToggleList(newToggleList);\r\n    }, [toggleList]);\r\n\r\n    return (\r\n        <div>\r\n            <h1>{title}</h1>\r\n            <BingoContainer size={size}>\r\n                {wordList.map((w, i) => (\r\n                    <>\r\n                        {/* <CellCheck key={`cell-${i}i`} type=\"checkbox\" id={`cell-${i}`} value={(toggleList[i] != 0)}\r\n                            \r\n                            \r\n                        /> */}\r\n                        <Cell size={size} index={Math.floor(i / size) + i} key={`cell-${i}l`}\r\n                            onClick={(e) => handleToggle(i)}\r\n                            toggle={toggleList[i]}\r\n                        >\r\n                            {w}\r\n                        </Cell>\r\n                    </>\r\n                ))}\r\n            </BingoContainer>\r\n            <Toolbar>\r\n                <ToolButton href={`#edit`}>Edit</ToolButton>\r\n            </Toolbar>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst shuffle = (array) => {\r\n    for (var i = array.length - 1; i > 0; i--) {\r\n        var j = Math.floor(Math.random() * (i + 1));\r\n        var temp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = temp;\r\n    }\r\n    return array;\r\n}\r\n\r\nconst Toolbar = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: flex-end;\r\n    align-items: center;\r\n    width: 100%;\r\n    flex-grow: 1;\r\n`\r\n\r\nconst ToolButton = styled.a`\r\n    justify-self: end;\r\n`\r\n\r\nconst BingoContainer = styled.div`\r\n    display: grid;\r\n    grid-template-columns: repeat(${p => p.size}, 1fr);\r\n    grid-template-rows: repeat(${p => p.size}, 1fr);\r\n    border-right: 1px solid #555555;\r\n    border-bottom: 1px solid #555555;\r\n    width: 80vw;\r\n    height: 80vw;\r\n`\r\n\r\nconst Cell = styled.label`\r\n    display: flex;\r\n    height: 100%;\r\n    width: 100%;\r\n    justify-content: center;\r\n    align-items: center;\r\n    user-select: none;\r\n    cursor: pointer;\r\n    border-top: 1px solid #555555;\r\n    border-left: 1px solid #555555;\r\n    /* border: 1px solid #555555; */\r\n    \r\n    background-color: ${p => [\"none\", `#bbbbbb`, `lightgreen`][p.toggle]};\r\n    text-decoration: ${p => p.toggle > 0 ? \"line-through\" : \"none\"};\r\n`\r\n\r\nconst CellCheck = styled.input`\r\n    display: none;\r\n    \r\n    &:checked + label {\r\n        background-color: ${p => p.toggle ? `green` : `#bbbbbb`};\r\n        text-decoration: line-through;\r\n    }\r\n`\r\n","import React from 'react'\r\nimport styled, { css } from 'styled-components'\r\n\r\nexport default function Edit({ title, words }) {\r\n    return (\r\n        <div>\r\n            <h2>Edit</h2>\r\n            <Container action=\"/bingo\">\r\n                <Label htmlFor=\"title\">Title</Label>\r\n                <TextInput id=\"title\" name=\"t\" type=\"text\" defaultValue={title} />\r\n                <Label htmlFor=\"words\">Words</Label>\r\n                <TextArea id=\"words\" name=\"w\" defaultValue={words} />\r\n                <Button type=\"submit\">Start</Button>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Container = styled.form`\r\n    display: flex;\r\n    flex-direction: column;\r\n`\r\n\r\nconst Label = styled.label`\r\n    \r\n`\r\n\r\nconst Input = css`\r\n    \r\n`\r\n\r\nconst TextInput = styled.input`\r\n    ${Input}\r\n`\r\n\r\nconst TextArea = styled.textarea`\r\n    ${Input}\r\n`\r\n\r\nconst Button = styled.button`\r\n    margin: 1em 0;\r\n`\r\n","import React from 'react';\nimport { useLocation, useSearchParam } from 'react-use';\nimport styled from 'styled-components';\nimport './App.css';\nimport Bingo from './Components/Bingo';\nimport Edit from './Components/Edit';\n\nfunction App() {\n\n  const title = useSearchParam(\"t\");\n  const words = useSearchParam(\"w\");\n  const edit = useLocation().hash == \"#edit\" || !title || !words;\n  console.log(useLocation().hash);\n\n  return (\n    <Container className=\"App\">\n      {edit ?\n        <Edit {...{ title, words }} />\n        :\n        <Bingo {...{ title, words }} />\n      }\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: center;\n  align-items: center;\n`\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}