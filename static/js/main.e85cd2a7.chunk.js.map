{"version":3,"sources":["Components/Bingo.js","Components/Edit.js","App.js","serviceWorker.js","index.js"],"names":["Bingo","title","words","wordList","shuffle","split","size","Math","ceil","sqrt","length","count","Array","keys","map","x","Row","key","min","y","CellCheck","type","id","Cell","htmlFor","array","i","j","floor","random","temp","styled","div","label","input","Edit","Container","Label","TextInput","name","TextArea","Button","form","Input","css","textarea","button","App","useSearchParam","edit","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"m1BAGe,SAASA,EAAT,GAAkC,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,MAE7BC,EAAWC,EAAQF,EAAMG,MAAM,OAC/BC,EAAOC,KAAKC,KAAKD,KAAKE,KAAKN,EAASO,SACpCC,EAAQR,EAASO,OAGvB,OACI,6BACI,4BAAKT,GAEJ,YAAIW,MAAMN,GAAMO,QAAQC,KAAI,SAAAC,GAAC,OAC1B,kBAACC,EAAD,CAAKC,IAAG,cAASF,IACZ,YAAIH,MAAML,KAAKW,IAAIH,EAAIT,EAAOA,EAAMK,GAASI,EAAIT,GAAMO,QAAQC,KAAI,SAAAK,GAAC,OACjE,oCACI,kBAACC,EAAD,CAAWC,KAAK,WAAWJ,IAAG,eAAUF,EAAIT,EAAOa,EAArB,KAA2BG,GAAE,eAAUP,EAAIT,EAAOa,KAChF,kBAACI,EAAD,CAAMC,QAAO,eAAUT,EAAIT,EAAOa,GAAKF,IAAG,eAAUF,EAAIT,EAAOa,EAArB,MAA4BhB,EAASY,EAAIT,EAAOa,aAStH,IAAMf,EAAU,SAACqB,GACb,IAAK,IAAIC,EAAID,EAAMf,OAAS,EAAGgB,EAAI,EAAGA,IAAK,CACvC,IAAIC,EAAIpB,KAAKqB,MAAMrB,KAAKsB,UAAYH,EAAI,IACpCI,EAAOL,EAAMC,GACjBD,EAAMC,GAAKD,EAAME,GACjBF,EAAME,GAAKG,EAEf,OAAOL,GAGLT,EAAMe,IAAOC,IAAV,KAKHT,EAAOQ,IAAOE,MAAV,KAYJb,EAAYW,IAAOG,MAAV,K,6gBCpDA,SAASC,IACpB,OACI,6BACI,oCACA,kBAACC,EAAD,KACI,kBAACC,EAAD,CAAOb,QAAQ,SAAf,SACA,kBAACc,EAAD,CAAWhB,GAAG,QAAQiB,KAAK,IAAIlB,KAAK,SACpC,kBAACgB,EAAD,CAAOb,QAAQ,SAAf,SACA,kBAACgB,EAAD,CAAUlB,GAAG,QAAQiB,KAAK,MAC1B,kBAACE,EAAD,CAAQpB,KAAK,UAAb,WAMhB,IAAMe,EAAYL,IAAOW,KAAV,KAKTL,EAAQN,IAAOE,MAAV,KAILU,EAAQC,YAAH,KAILN,EAAYP,IAAOG,MAAV,IACTS,GAGAH,EAAWT,IAAOc,SAAV,IACRF,GAGAF,EAASV,IAAOe,OAAV,K,6JCfZ,IAAMV,EAAYL,IAAOC,IAAV,KAOAe,EAxBf,WAEE,IAAM9C,EAAQ+C,YAAe,KACvB9C,EAAQ8C,YAAe,KACvBC,GAAQhD,IAAUC,EAExB,OACE,kBAAC,EAAD,CAAWgD,UAAU,OAClBD,EACC,kBAACd,EAAD,MAEA,kBAACnC,EAAU,CAAEC,QAAOC,YCNRiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e85cd2a7.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components';\r\n\r\nexport default function Bingo({ title, words }) {\r\n\r\n    const wordList = shuffle(words.split(\"\\n\"));\r\n    const size = Math.ceil(Math.sqrt(wordList.length))\r\n    const count = wordList.length;\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1>{title}</h1>\r\n\r\n            {[...Array(size).keys()].map(x => (\r\n                <Row key={`row-${x}`}>\r\n                    {[...Array(Math.min(x * size + size, count) - x * size).keys()].map(y => (\r\n                        <>\r\n                            <CellCheck type=\"checkbox\" key={`cell-${x * size + y}i`} id={`cell-${x * size + y}`} />\r\n                            <Cell htmlFor={`cell-${x * size + y}`} key={`cell-${x * size + y}l`}>{wordList[x * size + y]}</Cell>\r\n                        </>\r\n                    ))}\r\n                </Row>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst shuffle = (array) => {\r\n    for (var i = array.length - 1; i > 0; i--) {\r\n        var j = Math.floor(Math.random() * (i + 1));\r\n        var temp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = temp;\r\n    }\r\n    return array;\r\n}\r\n\r\nconst Row = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n`\r\n\r\nconst Cell = styled.label`\r\n    display: flex;\r\n    width: 100px;\r\n    height: 100px;\r\n    justify-content: center;\r\n    align-items: center;\r\n    border: 1px solid black;\r\n    user-select: none;\r\n    cursor: pointer;\r\n    \r\n`\r\n\r\nconst CellCheck = styled.input`\r\n    display: none;\r\n    \r\n    &:checked + label {\r\n        background-color: #888888;\r\n        text-decoration: line-through;\r\n    }\r\n`\r\n","import React from 'react'\r\nimport styled, { css } from 'styled-components'\r\n\r\nexport default function Edit() {\r\n    return (\r\n        <div>\r\n            <h2>Edit</h2>\r\n            <Container>\r\n                <Label htmlFor=\"title\">Title</Label>\r\n                <TextInput id=\"title\" name=\"t\" type=\"text\" />\r\n                <Label htmlFor=\"words\">Words</Label>\r\n                <TextArea id=\"words\" name=\"w\" />\r\n                <Button type=\"submit\">Start</Button>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Container = styled.form`\r\n    display: flex;\r\n    flex-direction: column;\r\n`\r\n\r\nconst Label = styled.label`\r\n    \r\n`\r\n\r\nconst Input = css`\r\n    \r\n`\r\n\r\nconst TextInput = styled.input`\r\n    ${Input}\r\n`\r\n\r\nconst TextArea = styled.textarea`\r\n    ${Input}\r\n`\r\n\r\nconst Button = styled.button`\r\n    margin: 1em 0;\r\n`\r\n","import React from 'react';\nimport { useLocation, useSearchParam } from 'react-use';\nimport styled from 'styled-components';\nimport './App.css';\nimport Bingo from './Components/Bingo';\nimport Edit from './Components/Edit';\n\nfunction App() {\n\n  const title = useSearchParam(\"t\");\n  const words = useSearchParam(\"w\");\n  const edit = !title || !words;\n\n  return (\n    <Container className=\"App\">\n      {edit ?\n        <Edit />\n        :\n        <Bingo {...{ title, words }} />\n      }\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: center;\n  align-items: center;\n`\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}